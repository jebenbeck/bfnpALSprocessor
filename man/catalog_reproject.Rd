% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/catalog_reproject.R
\name{catalog_reproject}
\alias{catalog_reproject}
\title{Reproject lascatalog}
\usage{
catalog_reproject(
  lascatalog,
  input_epsg,
  output_epsg,
  output_path,
  parallel = FALSE,
  n_cores = 2
)
}
\arguments{
\item{lascatalog}{Object of class \code{lascatalog}}

\item{input_epsg}{character featuring EPSG definition in the style of "EPSG:31468".}

\item{output_epsg}{character featuring EPSG definition in the style of "EPSG:31468".}

\item{output_path}{character featuring the output path where the transformed laz files will be written to.}

\item{parallel}{logical of length 1. Should the computation be split over several cores? Defaults to FALSE.}

\item{n_cores}{numeric of length 1. If \code{parall = TRUE}, on how many cores should the computations be run on?
Defaults to the value registered in \code{options("cores")[[1]]}, or, if this is not available, to \verb{parallel::detectCores())}.}
}
\value{
lascatalog object (laz format on disk)
}
\description{
Transforms the coordinate system of a lascatalog using \code{\link[sf:st_transform]{sf::st_transform()}}.
Hereby, all files will be transformed seperately and the catalog structure will not be touched.

While this function can transform from and to any horizontal coordinate system implemented in \code{\link[sf:st_transform]{sf::st_transform()}}, it is specialized on converting point cloud data stored
in \href{https://epsg.io/31468}{GK4 - EPSG:31468} to \href{https://epsg.io/25832}{UTM32N - EPSG:25832}.
The focus on this transformation is based on the fact, that most of the ALS data acquired in the BFNP before 2018 is stored in GK4, as it was the default reference system back then.
As the new standard is UTM32N, all data has to be transformed in order perform time series analysis more easily.

There are many different methods to transform coordinates between GK4 and UTM32N, the most accurate one is the "Beta2007" method
which relies on a transformation grid to change the geodetic datum. When checking the accuracy of the methods using reference points
from the bavarian surveying agency, it could be found that the accuracy went from 0.22 m in x and 0.12 m in y direction (median)
when using the default method to 0.02 m (median) in x and y direction when using the Beta2007 grid. Therefore, when transforming ALS data,
this method shall be used and this function makes it possible to to so.

Base \code{lidR} uses a ported version of \code{\link[sf:st_transform]{sf::st_transform()}} in which always uses the default option, which is not Beta2007 for
transformations between GK4 and UTM32N. This leads to shifts of upt to 1 m in the point cloud datasets. However, there is a workaround to
manually make the Beta2007 method the default one and therefore use it in \code{lidR}.

To do so, the system has to be prepared by setting up some prerequisites and some basic concepts need to be understood:

To transform coordinates with \code{\link[sf:st_transform]{sf::st_transform()}} it relies on the \href{https://proj.org/en/stable}{PROJ library}.
It uses \href{https://proj.org/en/stable/usage/transformation.html#transformation-pipelines}{pipelines} to define the exact transformation method that should be used.
Transformation grids to change the geodetic datum can be implemented into the pipelines using \href{https://proj.org/en/stable/usage/transformation.html#grid-based-datum-adjustments}{NTv2 grid datasets}.
The different transformation pipelines can be observed by calling \code{options <- sf_proj_pipelines(source_crs = "EPSG:31468", target_crs = "EPSG:25832")} and then looking at \code{options} via \code{View(options)}.
Hereby, the first entry is the one that will be used to transform the data. Usually, this is not the Beta2007 method so we have to make it that.

In order to use grid-based transformations, \code{\link[sf:st_transform]{sf::st_transform()}} needs to have access to the grid file in \code{.tif} format.
There are two options to make that work:
\enumerate{
\item accessing the file through the web via \href{https://cdn.proj.org/}{PROJ.org Datumgrid CDN}
\item downloading the file and putting it into your local library \n
To make it usable as the \code{lidR} default method, we actually have to set up both. In know it's weird but it is what it is.
}

Enabling the web-service can be done by calling \code{sf_proj_network(enable = T)}. Afterwards, check, which method is default by calling
\code{options <- sf_proj_pipelines(source_crs = "EPSG:31468", target_crs = "EPSG:25832")} and then looking at \code{options} again. The following definition entry should be on top:

\code{+proj=pipeline +step +inv +proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=4500000 +y_0=0 +ellps=bessel +step +proj=hgridshift +grids=de_adv_BETA2007.tif +step +proj=utm +zone=32 +ellps=GRS80}

That's already great! However, for some reason, \code{lidR} requires the grid to be available offline so we have to download the file from \href{https://cdn.proj.org/de_adv_BETA2007.tif}{PROJ.org Datumbgrid CDN}
and store it in the local PROJ library folder which can be found by calling \code{\link[sf:proj_tools]{sf::sf_proj_search_paths()}}. In my case it was \code{"C:/Users/username/AppData/Local/R/win-library/4.4/sf/proj"}.
After doing that for the first time, R needs to be restarted to apply these changes.

You only need to set up this once on your system, afterwards the code will work properly. The function will check for you if the settings are okay and the grid file exists at the correct place.
}
\examples{
ctg <- readALSLAScatalog("/path/to/lazfiles")
catalog_reproject(lascatalog = ctg, input_epsg = "EPSG:31468", output_epsg = "EPSG:25832", output_path = "path/to/output", parallel = TRUE, n_cores = 3)
check projection if needed:
apply options to lascatalog
special check if transformation is from GK4 to UTM32
activate network connection
get transformation options available with grid:
ckech if transformation grid exists:
function to reproject las data:
plan parallel processing
apply function to lascatalog:
}
