% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/catalog_filter.R
\name{catalog_filter}
\alias{catalog_filter}
\title{Filter point clouds}
\usage{
catalog_filter(
  lascatalog,
  filter_noise = TRUE,
  algorithm_noise = ivf(5, 2),
  filter_heights = TRUE,
  bins_height = c(300, 1600),
  filter_mode = "remove",
  output_path,
  filename_convention = "{ORIGINALFILENAME}",
  parallel = FALSE,
  n_cores = 2
)
}
\arguments{
\item{lascatalog}{object of class \code{lascatalog}.}

\item{filter_noise}{logical of length 1. If TRUE filters noise based on the algorithm defined in \code{algorithm_noise}}

\item{algorithm_noise}{An algorithm used for filtering noise, see \code{\link[lidR:classify]{lidR::classify_noise()}}. Defaults to ivf(5,2)}

\item{filter_heights}{logical of length 1. If TRUE filters outliers based on upper and lower heights defined by \code{bins_height}}

\item{bins_height}{numeric list of length 2, defines the lower and upper heights to be kept in the dataset}

\item{filter_mode}{character; either "remove" or "classify". When "remove": points filtered are removed from tha dataset,
when "classify" points filtered are classified as noise.}

\item{output_path}{character path to the folder where the new files should be exported to}

\item{filename_convention}{character defining the filenames of the generated laz files following lidR basics. Defaults
to the original filename}

\item{parallel}{logical of length 1. Should the computation be split over several cores? Defaults to FALSE.}

\item{n_cores}{numeric of length 1. If \code{parall = TRUE}, on how many cores should the computations be run on?
Defaults to the value registered in \code{options("cores")[[1]]}, or, if this is not available, to \verb{parallel::detectCores())}.}
}
\value{
lascatalog
}
\description{
This function filters point clouds to remove or classify noise and outlier points
}
\examples{
ctg <- readALSLAScatalog("/path/to/lazfiles")
ctg_normalized <- catalog_normalize(ctg, filter_noise = TRUE, algorithm_noise = ivf(5,2), filter_heights = TRUE,
bins_height = c(300, 1600), filter_mode = "remove", output_path = "D:/6_pointclouds_normalized",
filename_convention = "{ORIGINALFILENAME}", parallel = F, n_cores = 1)
apply options to lascatalog
function to filter outliers:
remove all impossible heights:
Filtering for outliers:
remove the points classified as noise:
plan parallel processing
apply function to lascatalog:
}
