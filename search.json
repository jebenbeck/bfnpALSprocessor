[{"path":"https://jebenbeck.github.io/bfnpALSprocessor/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Jakob Ebenbeck Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/articles/ALS-2012-07-metadata.html","id":"description-of-the-2012-07-dataset","dir":"Articles","previous_headings":"","what":"Description of the 2012-07 dataset:","title":"ALS 2012-07 metadata","text":"Acquisition dates: 24..7.2012, 26.07.2012, 27.07.2012 Company: MILAN Geoservice GmbH Spatial coverage: full Bavarian Forest National Park (2012) File format point cloud: *.asc File size point cloud (total): 574 gb number tiles: 1102 seperation flightpath (tiles overlapping) Coordinate system: GK4 (EPSG:31468) Vertical datum: unknown attributes original text files identified metadata descriptions contacting MILAN:","code":""},{"path":[]},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/articles/ALS-2012-07-metadata.html","id":"convert-data-to-laz","dir":"Articles","previous_headings":"Processing pipeline","what":"Convert data to laz","title":"ALS 2012-07 metadata","text":"save disk space able use lidR package, individual tiles converted original ASC format LAZ format. Hereby, attributes named accordingly las naming conventions. “pulsewidth” however part therefore added extra, user-defined attribute.","code":""},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/articles/ALS-2012-07-metadata.html","id":"add-number-of-returns","dir":"Articles","previous_headings":"Processing pipeline","what":"Add number of returns","title":"ALS 2012-07 metadata","text":"attribute “number returns” missing. However, important defines number last return pulse, metric needed calculation DTMs example. , attribute calculated added according las naming convention.","code":""},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jakob Ebenbeck. Author, maintainer.","code":""},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ebenbeck J (2025). bfnpALSprocessor: Process ALS data Bavarian Forest National Park. R package version 0.0.0.9000, https://github.com/jebenbeck/bfnpALSprocessor.","code":"@Manual{,   title = {bfnpALSprocessor: Process ALS data from the Bavarian Forest National Park},   author = {Jakob Ebenbeck},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/jebenbeck/bfnpALSprocessor}, }"},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/index.html","id":"bfnpalsprocessor","dir":"","previous_headings":"","what":"Process ALS data from the Bavarian Forest National Park","title":"Process ALS data from the Bavarian Forest National Park","text":"package used process harmonize available ALS data Bavarian Forest National Park document individual processing steps performed dataset. mainly builds ready--use functions reapeat certain processing steps several different data sets relies lidR, sf terra. package includes functions used full documentation processing steps applied available ALS data Bavarian forest national park.","code":""},{"path":[]},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_clip_polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate statistics on lascatalog files — catalog_clip_polygons","title":"Calculate statistics on lascatalog files — catalog_clip_polygons","text":"function generates multiple output *.laz files based input polygons (one file per polygon). files named attribute input polygon dataset.","code":""},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_clip_polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate statistics on lascatalog files — catalog_clip_polygons","text":"","code":"catalog_clip_polygons(   lascatalog,   input_epsg,   output_path,   filename_convention = \"{ID}\",   polygons,   parallel = F,   n_cores = 2 )"},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_clip_polygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate statistics on lascatalog files — catalog_clip_polygons","text":"lascatalog object class lascatalog input_epsg character EPSG-code coordinate system output_path character path folder newly generated laz-files exported filename_convention character identifying attribute polygon data used name output files polygons object class spatial polygons featuring attribute IDs names polygons parallel logical length 1. computation split several cores? Defaults FALSE. n_cores numeric length 1. parall = TRUE, many cores computations run ? Defaults value registered options(\"cores\")[[1]], , available, parallel::detectCores()).","code":""},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_clip_polygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate statistics on lascatalog files — catalog_clip_polygons","text":"lascatalog","code":""},{"path":[]},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_normalize.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize point clouds — catalog_normalize","title":"Normalize point clouds — catalog_normalize","text":"function normalizes point clouds receive height ground additional attribute","code":""},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_normalize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize point clouds — catalog_normalize","text":"","code":"catalog_normalize(   lascatalog,   algorithm = tin(),   dtm_path = NULL,   output_path,   filename_convention = \"{ORIGINALFILENAME}\",   parallel = FALSE,   n_cores = 2 )"},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_normalize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize point clouds — catalog_normalize","text":"lascatalog object class lascatalog. Needs classified ground points. algorithm (1) algorithm used spatial interpolation point cloud data, uses ones available via lidR::normalize_height() (2) character vector \"dtm\" dtm available used. Defaults tin(). dtm_path character path pointing raster dataset representing DTM covered area output_path character path folder new files exported filename_convention character defining filenames generated laz files following lidR basics. Defaults original filename parallel logical length 1. computation split several cores? Defaults FALSE. n_cores numeric length 1. parall = TRUE, many cores computations run ? Defaults value registered options(\"cores\")[[1]], , available, parallel::detectCores()).","code":""},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_normalize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize point clouds — catalog_normalize","text":"lascatalog","code":""},{"path":[]},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_reproject.html","id":null,"dir":"Reference","previous_headings":"","what":"Reproject lascatalog — catalog_reproject","title":"Reproject lascatalog — catalog_reproject","text":"Transforms coordinate system lascatalog using sf::st_transform(). Hereby, files transformed seperately catalog structure touched. function can transform horizontal coordinate system implemented sf::st_transform(), specialized converting point cloud data stored GK4 - EPSG:31468 UTM32N - EPSG:25832. focus transformation based fact, ALS data acquired BFNP 2018 stored GK4, default reference system back . new standard UTM32N, data transformed order perform time series analysis easily. many different methods transform coordinates GK4 UTM32N, accurate one \"Beta2007\" method relies transformation grid change geodetic datum. checking accuracy methods using reference points bavarian surveying agency, found accuracy went 0.22 m x 0.12 m y direction (median) using default method 0.02 m (median) x y direction using Beta2007 grid. Therefore, transforming ALS data, method shall used function makes possible . Base lidR uses ported version sf::st_transform() always uses default option, Beta2007 transformations GK4 UTM32N. leads shifts upt 1 m point cloud datasets. However, workaround manually make Beta2007 method default one therefore use lidR. , system prepared setting prerequisites basic concepts need understood: transform coordinates sf::st_transform() relies PROJ library. uses pipelines define exact transformation method used. Transformation grids change geodetic datum can implemented pipelines using NTv2 grid datasets. different transformation pipelines can observed calling options <- sf_proj_pipelines(source_crs = \"EPSG:31468\", target_crs = \"EPSG:25832\") looking options via View(options). Hereby, first entry one used transform data. Usually, Beta2007 method make . order use grid-based transformations, sf::st_transform() needs access grid file .tif format. two options make work: accessing file web via PROJ.org Datumgrid CDN downloading file putting local library make usable lidR default method, actually set . know weird . Enabling web-service can done calling sf_proj_network(enable = T). Afterwards, check, method default calling options <- sf_proj_pipelines(source_crs = \"EPSG:31468\", target_crs = \"EPSG:25832\") looking options . following definition entry top: +proj=pipeline +step +inv +proj=tmerc +lat_0=0 +lon_0=12 +k=1 +x_0=4500000 +y_0=0 +ellps=bessel +step +proj=hgridshift +grids=de_adv_BETA2007.tif +step +proj=utm +zone=32 +ellps=GRS80 already great! However, reason, lidR requires grid available offline download file PROJ.org Datumbgrid CDN store local PROJ library folder can found calling sf::sf_proj_search_paths(). case \"C:/Users/username/AppData/Local/R/win-library/4.4/sf/proj\". first time, R needs restarted apply changes. need set system, afterwards code work properly. function check settings okay grid file exists correct place.","code":""},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_reproject.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reproject lascatalog — catalog_reproject","text":"","code":"catalog_reproject(   lascatalog,   input_epsg,   output_epsg,   output_path,   parallel = FALSE,   n_cores = 2 )"},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_reproject.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reproject lascatalog — catalog_reproject","text":"lascatalog Object class lascatalog input_epsg character featuring EPSG definition style \"EPSG:31468\". output_epsg character featuring EPSG definition style \"EPSG:31468\". output_path character featuring output path transformed laz files written . parallel logical length 1. computation split several cores? Defaults FALSE. n_cores numeric length 1. parall = TRUE, many cores computations run ? Defaults value registered options(\"cores\")[[1]], , available, parallel::detectCores()).","code":""},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_reproject.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reproject lascatalog — catalog_reproject","text":"lascatalog object (laz format disk)","code":""},{"path":[]},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_retile_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Retile lascatalog — catalog_retile_template","title":"Retile lascatalog — catalog_retile_template","text":"function retiles lascatalog rigid tiles without overlap. Often, ALS data BFNP stored rigid tiles parts flight lines can overlap. good, want know points certain location within AOI, need consider multiple files get . function basically lidR::catalog_retile() default settings datasets, settings must used. restructures lascatalog match common grid 1x1 km tiles UTM coordinate system default relates common grid used datasets. course, works data first transferred UTM32N.","code":""},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_retile_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retile lascatalog — catalog_retile_template","text":"","code":"catalog_retile_template(   lascatalog,   tile_alignment = c(0, 0),   tile_size = 1000,   buffer_size = 0,   output_path,   filename_convention = \"{XLEFT}_{YBOTTOM}\",   laz_compression = T )"},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_retile_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retile lascatalog — catalog_retile_template","text":"lascatalog object class lascatalog, crs EPSG:25832 tile_alignment list length 2. See lidR::opt_chunk_alignment() tile_size numeric, tile size meter. See lidR::opt_chunk_size() buffer_size numeric, buffer size meter. See lidR::opt_chunk_buffer() output_path character, path resulting laz files exported filename_convention character. See lidR::opt_output_files() laz_compression logical length 1. See lidR::opt_laz_compression()","code":""},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_retile_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retile lascatalog — catalog_retile_template","text":"lascatalog","code":""},{"path":[]},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate statistics on lascatalog files — catalog_statistics","title":"Calculate statistics on lascatalog files — catalog_statistics","text":"Takes files lascatalog returns table statistics point density, covex area covered, extemt, etc. every tile","code":""},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate statistics on lascatalog files — catalog_statistics","text":"","code":"catalog_statistics(lascatalog, parallel = F, n_cores = 2, spatial = FALSE)"},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate statistics on lascatalog files — catalog_statistics","text":"lascatalog Object class lascatalog parallel logical length 1. computation split several cores? Defaults FALSE. n_cores numeric length 1. parall = TRUE, many cores computations run ? Defaults value registered options(\"cores\")[[1]], , available, parallel::detectCores()). spatial logical length 1. output spatial dataset (sf) polygons representing catalog tiles?","code":""},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate statistics on lascatalog files — catalog_statistics","text":"data frame","code":""},{"path":[]},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_to_polygons.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate footprint polygons of lascatalog objects — catalog_to_polygons","title":"Generate footprint polygons of lascatalog objects — catalog_to_polygons","text":"Takes files lascatalog returns polygon file polygon represents bounding box respective las / laz file. Addition resulting data cleaned unnecessary columns removed. Data can exported geopackage shapefile afterwards","code":""},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_to_polygons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate footprint polygons of lascatalog objects — catalog_to_polygons","text":"","code":"catalog_to_polygons(lascatalog)"},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_to_polygons.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate footprint polygons of lascatalog objects — catalog_to_polygons","text":"lascatalog Object class lascatalog","code":""},{"path":"https://jebenbeck.github.io/bfnpALSprocessor/reference/catalog_to_polygons.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate footprint polygons of lascatalog objects — catalog_to_polygons","text":"sf polygon","code":""},{"path":[]}]
